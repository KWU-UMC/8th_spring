RESTful API 설계의 주요 원칙
    1.플랫폼 독립성
        클라이언트가 API 구현 방식에 관계없이 API를 호출할 수 있어야 합니다.
        표준 프로토콜과 데이터 형식(JSON, XML 등)을 사용하여 호환성을 보장합니다.

    2.서비스 진화
        API는 클라이언트 애플리케이션과 독립적으로 발전할 수 있어야 하며, 기존 클라이언트는 수정 없이 계속 작동해야 합니다.
        기능은 검색 가능해야 하며, 하이퍼미디어(HATEOAS)를 활용하여 리소스 간 관계를 탐색할 수 있도록 합니다.

RESTful API 설계의 주요 구성 요소
    1.리소스 중심 설계
        리소스는 명사로 표현되며 URI를 통해 고유하게 식별됩니다.
        예: /orders는 주문 컬렉션을 나타내고, /orders/1은 특정 주문을 나타냅니다.

    2.HTTP 메서드 사용
        CRUD 작업에 적합한 HTTP 메서드를 사용:
            GET: 리소스 조회
            POST: 새로운 리소스 생성
            PUT: 리소스 생성 또는 대체
            PATCH: 리소스 부분 업데이트
            DELETE: 리소스 삭제.

    3.상태 비저장(stateless) 요청
        각 요청은 독립적이어야 하며, 서버는 클라이언트와의 세션 상태를 유지하지 않습니다.
        이 모델은 확장성을 높이고 서버 간 부하 분산을 용이하게 합니다.

데이터 처리 및 최적화
    1.데이터 필터링 및 페이지 매기기
        클라이언트가 필요한 데이터만 가져올 수 있도록 쿼리 매개변수를 활용합니다.
        예: /orders?minCost=100&limit=25&offset=50.

    2.대용량 데이터 처리
        Accept-Ranges 헤더를 사용하여 대용량 파일을 청크로 나누어 전송합니다.
        부분 응답을 지원하여 연결 안정성과 성능을 개선합니다.

버전 관리 전략
API 변경 시 클라이언트 호환성을 유지하기 위해 다양한 버전 관리 방법을 사용할 수 있습니다:
    1.URI 버전 관리
        버전을 URI에 포함하여 명시적으로 표시합니다(예: /v2/orders).

    2.쿼리 문자열 버전 관리
        버전을 쿼리 매개변수로 전달합니다(예: /orders?version=2).

    3.헤더 버전 관리
        사용자 지정 헤더를 통해 버전을 지정합니다(예: Custom-Header: api-version=2).

    4.미디어 형식 버전 관리
        Accept 헤더를 사용하여 특정 미디어 형식과 함께 버전을 지정합니다(예: application/vnd.adventure-works.v2+json).

HATEOAS 활용
    응답 메시지에 하이퍼링크를 포함하여 관련 리소스를 탐색할 수 있도록 지원합니다.
    각 링크는 관계(rel), URI(href), 수행 가능한 작업(action) 등을 명시합니다.
