- **DI**
    - 개념
        - **의존성(Dependency):** 한 객체가 다른 객체에 의존하는 관계를 의미합니다. 예를 들어, 클래스 A가 클래스 B를 직접 생성하거나 참조하면 A는 B에 의존한다고 말합니다.
        - **의존성 주입:** 객체가 필요한 의존성을 스스로 생성하지 않고, 외부에서 주입받는 방식입니다. 이를 통해 객체 간 결합도를 낮추고 코드의 유연성과 재사용성을 높일 수 있습니다
    - 구현 방법
        1. **생성자 주입:** 의존성을 생성자의 매개변수로 전달받아 초기화합니다.
        2. **Setter(수정자) 주입:** Setter 메서드를 통해 의존성을 설정합니다.
        3. **필드 주입:** 객체의 필드에 직접 의존성을 주입합니다 (Spring에서는 권장되지 않음).
    - 장점
        - **결합도 감소:** 객체 간 결합도를 낮춰 유지보수와 확장성을 높입니다.
        - **테스트 용이성:** 의존성을 외부에서 주입받기 때문에 테스트용 객체를 쉽게 대체할 수 있습니다.
        - **재사용성 증가:** 특정 구현체에 종속되지 않아 다양한 상황에서 재사용 가능합니다.
        - **코드 가독성 향상:** 의존성 관리가 명확해져 코드 구조가 더 이해하기 쉬워집니다
- **IoC**
    - 개념
        - **제어의 역전(Inversion of Control):** 전통적인 방식에서는 프로그램이 직접 객체를 생성하고 관리하지만, IoC에서는 이러한 제어권이 외부로 넘어갑니다. 즉, 객체가 스스로 의존성을 관리하지 않고 외부에서 주입받는 방식으로 동작합니다[1](https://kimjh0727.tistory.com/entry/IoC%EC%9D%98-%EB%9E%80feat-typescript)[3](https://bitkunst.tistory.com/entry/ABOUTSeries-12-IoC-Inversion-of-Control-%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84-DI-Dependency-Injection-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85)[5](https://idkim97.github.io/2022-08-29-%EC%A0%9C%EC%96%B4%EC%9D%98%20%EC%97%AD%EC%A0%84(IoC)/).
        - **프레임워크와의 차별점:** IoC는 애플리케이션이 프레임워크에 의해 제어되도록 설계됩니다. 이는 라이브러리처럼 개발자가 직접 호출하는 방식과는 다릅니다
    - 주요 특징
        1. **객체 생성 및 관리 위임:**
            - 개발자가 객체를 직접 생성하지 않고, IoC 컨테이너가 이를 대신 처리합니다.
            - 예를 들어, 스프링 프레임워크의 IoC 컨테이너는 애플리케이션에서 필요한 객체를 자동으로 생성하고 관리합니다[2](https://gyunny.tistory.com/345)[4](https://jjangadadcodingdiary.tistory.com/entry/IoC-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88Inversion-of-Control-Container-%EC%86%8C%EA%B0%9C%EC%99%80-%ED%99%9C%EC%9A%A9-%EB%B0%A9%EB%B2%95)[6](https://jaehyuuk.tistory.com/199).
        2. **의존성 주입(DI)과의 관계:**
            - IoC는 의존성 주입(DI)을 통해 구현되는 경우가 많습니다. DI는 객체가 필요로 하는 의존성을 외부에서 주입받는 방식을 의미하며, 이를 통해 IoC의 원칙을 실현합니다[3](https://bitkunst.tistory.com/entry/ABOUTSeries-12-IoC-Inversion-of-Control-%EC%A0%9C%EC%96%B4%EC%9D%98-%EC%97%AD%EC%A0%84-DI-Dependency-Injection-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85)[6](https://jaehyuuk.tistory.com/199).
        3. **생명주기 관리:**
            - IoC 컨테이너는 객체의 생성부터 소멸까지 생명주기를 관리하며, 이를 통해 메모리와 리소스 사용을 최적화합니다
    - 컨테이너
        
        IoC 컨테이너는 IoC 원칙을 구현하는 도구로, 다음과 같은 역할을 합니다:
        
        - **객체 생성:** 필요한 객체를 자동으로 생성하고 초기화합니다.
        - **의존성 주입:** 객체 간 의존성을 자동으로 연결하여 결합도를 낮춥니다.
        - **설정 외부화:** 설정 정보를 XML 파일이나 어노테이션으로 분리해 유연한 변경을 가능하게 합니다[4](https://jjangadadcodingdiary.tistory.com/entry/IoC-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88Inversion-of-Control-Container-%EC%86%8C%EA%B0%9C%EC%99%80-%ED%99%9C%EC%9A%A9-%EB%B0%A9%EB%B2%95)[6](https://jaehyuuk.tistory.com/199)[10](https://f-lab.kr/insight/core-of-spring-framework-dependency-injection-and-ioc-container).
        
        ## **대표적인 IoC 컨테이너:**
        
        - Spring Framework의 **`ApplicationContext`**
        - Google Guice
        - Java EE의 CDI(Container Dependency Injection)
    - 장점
        1. **결합도 감소:** 객체 간 강한 결합을 느슨한 결합으로 전환해 유지보수가 용이합니다.
        2. **유연성 증가:** 애플리케이션 구조가 더 유연해지고 확장성이 높아집니다.
        3. **코드 재사용성 향상:** 특정 구현체에 종속되지 않아 다양한 환경에서 재사용 가능합니다.
        4. **테스트 용이성:** 의존성을 외부에서 주입받기 때문에 테스트 대상을 쉽게 교체할 수 있습니다
    - 
- **프레임워크와 API의 차이**
    - 프레임워크
        
        프레임워크는 소프트웨어 개발을 위한 **기본적인 구조와 틀**을 제공하는 도구입니다. 개발자는 프레임워크가 제공하는 규칙과 구조에 따라 코드를 작성하며, 프레임워크는 애플리케이션의 흐름을 제어합니다.
        
        ## **특징**
        
        - **제어의 역전(Inversion of Control, IoC):** 개발자가 애플리케이션의 흐름을 직접 제어하지 않고, 프레임워크가 흐름을 주도합니다. 즉, 개발자가 작성한 코드가 프레임워크에 의해 호출됩니다[1](https://fni8383.tistory.com/16)[5](https://rlakuku-program.tistory.com/19).
        - **재사용성:** 반복적으로 사용 가능한 일반적인 컴포넌트를 제공하여 개발 속도를 높이고 품질을 향상시킵니다[2](https://codedragon.tistory.com/5939).
        - **확장성:** 다형성을 통해 새로운 기능을 추가하거나 기존 기능을 확장할 수 있습니다[2](https://codedragon.tistory.com/5939).
        - **예시:** Spring, Django, React 등.
    - API
        
        API는 소프트웨어 간의 **인터페이스**를 정의하는 규약입니다. 이를 통해 한 소프트웨어가 다른 소프트웨어의 기능을 호출하거나 사용할 수 있습니다. API는 구현 로직 없이 사용 방법만 정의되어 있으며, 개발자가 필요할 때 호출하여 사용합니다.
        
        ## **특징**
        
        - **인터페이스 역할:** API는 서로 다른 시스템 간의 연결 다리 역할을 합니다. 예를 들어, 클라이언트가 서버에 요청을 보내고 응답을 받는 방식입니다[1](https://fni8383.tistory.com/16)[3](https://dkswnkk.tistory.com/517).
        - **독립적 설계:** API는 특정 구현체와 독립적으로 설계되며, 접근 권한이 필요할 수 있습니다[3](https://dkswnkk.tistory.com/517).
        - **예시:** Google Maps API, Twitter API, RESTful API 등.
    - 비교
        
        
        | **항목** | **프레임워크** | **API** |
        | --- | --- | --- |
        | **역할** | 애플리케이션 개발을 위한 구조와 틀 제공 | 소프트웨어 간 상호작용을 위한 인터페이스 정의 |
        | **제어권** | 프레임워크가 애플리케이션 흐름을 제어 | 개발자가 필요한 때 API를 호출하여 사용 |
        | **사용 방식** | 규칙과 구조를 준수하며 개발 | 요청/응답 방식으로 다른 시스템과 통신 |
        | **예시** | Spring, Angular, Django | Google Maps API, Twitter API |
    - 
- **AOP**
    - 개념
        1. **Aspect (관점):**
            - 횡단 관심사를 모듈화한 단위입니다. 예를 들어, 로깅, 보안, 트랜잭션 관리와 같은 기능을 Aspect로 정의합니다[1](https://f-lab.kr/insight/understanding-and-applying-aop-in-programming)[2](https://rma7.tistory.com/70).
        2. **Join Point (조인 포인트):**
            - Aspect가 적용될 수 있는 지점을 의미합니다. 메서드 호출, 객체 생성, 예외 처리 등이 이에 해당합니다[1](https://f-lab.kr/insight/understanding-and-applying-aop-in-programming)[6](https://whybk.tistory.com/153).
        3. **Advice (어드바이스):**
            - 특정 Join Point에서 실행되는 코드입니다. Advice는 실행 시점에 따라 다음과 같은 유형으로 나뉩니다:
                - **Before:** 메서드 실행 전에 동작.
                - **After:** 메서드 실행 후 동작.
                - **Around:** 메서드 실행 전후 및 예외 발생 시 동작[6](https://whybk.tistory.com/153)[8](https://curiousjinan.tistory.com/entry/spring-aop-understand).
        4. **Pointcut (포인트컷):**
            - Advice가 적용될 Join Point를 정의하는 표현식입니다. 특정 메서드나 클래스에 대해 AOP를 적용할 위치를 지정합니다[4](https://velog.io/@wnguswn7/Spring-AOPAspect-Oriented-Programming%EB%9E%80)[6](https://whybk.tistory.com/153).
        5. **Weaving (위빙):**
            - Pointcut에 정의된 Join Point에 Advice를 결합하는 과정입니다. 이 작업은 컴파일 타임, 로드 타임 또는 런타임에 이루어질 수 있습니다
    - 목적
        - **관심사의 분리:** 핵심 비즈니스 로직과 부가적인 기능(로깅, 보안 등)을 분리하여 코드의 가독성과 유지보수성을 향상시킵니다[5](https://sharonprogress.tistory.com/195)[7](https://hstory0208.tistory.com/entry/Spring-%EC%8A%A4%ED%94%84%EB%A7%81-AOPAspect-Oriented-Programming%EB%9E%80-Aspect).
        - **코드 중복 제거:** 공통적으로 사용되는 기능을 한 곳에서 관리하여 중복을 줄입니다.
        - **유지보수성 향상:** 부가적인 기능을 중앙에서 관리하므로 수정이 용이합니다.
    - Spring에서의 AOP
        
        스프링은 AOP를 강력하게 지원하며, 프록시 패턴과 AspectJ를 활용해 구현됩니다.
        
        ## **스프링 AOP의 활용 사례**
        
        1. **트랜잭션 관리:** 데이터베이스 작업 시 트랜잭션을 자동으로 시작하고 완료되면 커밋하거나 실패 시 롤백합니다[1](https://f-lab.kr/insight/understanding-and-applying-aop-in-programming)[8](https://curiousjinan.tistory.com/entry/spring-aop-understand).
        2. **로깅:** 메서드 실행 전후에 로그를 기록하여 디버깅과 시스템 모니터링을 용이하게 합니다[5](https://sharonprogress.tistory.com/195)[6](https://whybk.tistory.com/153).
        3. **보안 검사:** 메서드 실행 전에 사용자 인증 및 권한 검사를 수행합니다[1](https://f-lab.kr/insight/understanding-and-applying-aop-in-programming)[6](https://whybk.tistory.com/153).
        4. **성능 모니터링:** 메서드 실행 시간을 측정하여 성능을 분석합니다[8](https://curiousjinan.tistory.com/entry/spring-aop-understand).
- **서블릿**
    - 특징
        1. **동적 웹 컴포넌트:**
            - 클라이언트 요청에 따라 동적으로 작동하며, HTML을 포함한 다양한 데이터를 생성하여 응답합니다[1](https://dev-minjeong.tistory.com/25)[5](https://mangkyu.tistory.com/14).
        2. **Java 기반:**
            - 자바로 작성되며, 자바의 객체지향적 특징과 플랫폼 독립성을 활용할 수 있습니다[7](https://minjin-note.tistory.com/14)[15](https://chanheess.tistory.com/251).
        3. **MVC 패턴에서 컨트롤러 역할:**
            - 서블릿은 MVC 패턴에서 컨트롤러로 사용되어 클라이언트 요청을 처리하고 적절한 뷰(JSP)로 데이터를 전달합니다[1](https://dev-minjeong.tistory.com/25)[19](https://amy-it.tistory.com/85).
        4. **멀티스레드 지원:**
            - 하나의 서블릿 객체가 여러 클라이언트 요청을 처리하기 위해 멀티스레드 방식으로 동작하여 효율성을 높입니다[5](https://mangkyu.tistory.com/14)[19](https://amy-it.tistory.com/85).
    - 동작 과정
        1. 클라이언트가 HTTP 요청을 보냄.
        2. 웹 서버(WAS, 예: 톰캣)가 요청을 서블릿 컨테이너로 전달.
        3. 서블릿 컨테이너가 **`HttpServletRequest`**와 **`HttpServletResponse`** 객체를 생성.
        4. 요청에 해당하는 서블릿의 **`service()`** 메서드를 호출.
        5. **`doGet()`** 또는 **`doPost()`** 메서드 실행(요청 방식에 따라 분기).
        6. 동적 페이지 생성 후 응답 객체를 통해 클라이언트에 결과 전송.
        7. 요청 처리 완료 후 관련 객체 소멸[1](https://dev-minjeong.tistory.com/25)[3](https://velog.io/@falling_star3/Tomcat-%EC%84%9C%EB%B8%94%EB%A6%BFServlet%EC%9D%B4%EB%9E%80)[7](https://minjin-note.tistory.com/14).
    - 생명주기
        
        ## **1. 초기화 (init):**
        
        - 서블릿이 처음 메모리에 로드될 때 한 번만 실행됩니다.
        - 초기화 작업(예: 데이터베이스 연결 설정)을 수행합니다[6](https://kadosholy.tistory.com/47)[8](https://scshim.tistory.com/461).
        
        ## **2. 서비스 (service):**
        
        - 클라이언트 요청이 들어올 때마다 호출되며, HTTP 요청을 처리하고 응답을 생성합니다.
        - 요청 방식(GET, POST 등)에 따라 **`doGet()`** 또는 **`doPost()`** 메서드를 호출합니다[6](https://kadosholy.tistory.com/47)[8](https://scshim.tistory.com/461).
        
        ## **3. 소멸 (destroy):**
        
        - 서블릿 컨테이너가 종료되거나 서블릿이 제거될 때 호출됩니다.
        - 리소스를 정리하거나 연결을 해제하는 작업을 수행합니다[6](https://kadosholy.tistory.com/47)[8](https://scshim.tistory.com/461).
    - 컨테이너
        - 서블릿은 독립적으로 실행되지 않고, **서블릿 컨테이너**(예: 톰캣)에서 실행됩니다.
        - 컨테이너는 서블릿의 생명주기를 관리하며, 객체를 싱글톤으로 유지해 효율성을 높입니다.
        - JSP도 내부적으로는 서블릿으로 변환되어 실행됩니다[1](https://dev-minjeong.tistory.com/25)[4](https://blog.naver.com/PostView.naver?blogId=poodoli2000&logNo=223128037151&parentCategoryNo=&categoryNo=121&viewDate=&isShowPopularPosts=false&from=postView).
    - 장점
        - 플랫폼 독립적이고 이식성이 뛰어남.
        - 멀티스레드 지원으로 성능 효율성 증대.
        - MVC 패턴 적용이 용이하며 보안 기능 구현이 쉬움[5](https://mangkyu.tistory.com/14)[19](https://amy-it.tistory.com/85).
    - 단점
        - HTML 코드와 자바 코드가 혼합되어 관리가 어려울 수 있음(이를 해결하기 위해 JSP와 함께 사용).
        - 초기 설정 및 구현 과정이 복잡할 수 있음.
